# This file is part of C++ Plugin Framework.
#
# C++ Plugin Framework is free software: you can redistribute it and/or modify it under the terms
# of the GNU Lesser General Public License as published by the Free Software Foundation, either
# version 3 of the License, or (at your option) any later version.
#
# C++ Plugin Framework is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License along with C++ Plugin
# Framework. If not, see <http://www.gnu.org/licenses/>.

cmake_minimum_required(VERSION 3.3.0)

project(CppPluginFramework VERSION 1.0.0)

set(CMAKE_AUTOMOC ON)

find_package(Qt5Core REQUIRED)

# --------------------------------------------------------------------------------------------------
# CppPluginFramework library
# --------------------------------------------------------------------------------------------------
add_library(CppPluginFramework SHARED
    inc/CppPluginFramework/AbstractPlugin.hpp
    inc/CppPluginFramework/ConfigFile.hpp
    inc/CppPluginFramework/EnvironmentVariables.hpp
    inc/CppPluginFramework/IPlugin.hpp
    inc/CppPluginFramework/LibraryExport.hpp
    inc/CppPluginFramework/Plugin.hpp
    inc/CppPluginFramework/PluginConfig.hpp
    inc/CppPluginFramework/PluginExport.hpp
    inc/CppPluginFramework/PluginInstanceConfig.hpp
    inc/CppPluginFramework/PluginManager.hpp
    inc/CppPluginFramework/Validation.hpp
    inc/CppPluginFramework/VersionInfo.hpp

    src/AbstractPlugin.cpp
    src/ConfigFile.cpp
    src/EnvironmentVariables.cpp
    src/LogHelper.hpp
    src/Plugin.cpp
    src/PluginConfig.cpp
    src/PluginInstanceConfig.cpp
    src/PluginManager.cpp
    src/Validation.cpp
    src/VersionInfo.cpp
    )

target_include_directories(CppPluginFramework PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc>
    $<INSTALL_INTERFACE:include>
    )

target_link_libraries(CppPluginFramework PUBLIC
    Qt5::Core
    )

target_compile_definitions(CppPluginFramework PRIVATE
    CPPPLUGINFRAMEWORK_BUILD_LIBRARY
    )

set_target_properties(CppPluginFramework PROPERTIES
    CXX_STANDARD 14
    CXX_STANDARD_REQUIRED YES
    CXX_EXTENSIONS NO
    )

add_library(CppPluginFramework::CppPluginFramework ALIAS
    CppPluginFramework
    )

# --------------------------------------------------------------------------------------------------
# Package
# --------------------------------------------------------------------------------------------------

install(TARGETS CppPluginFramework EXPORT CppPluginFrameworkTargets DESTINATION
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    RUNTIME DESTINATION bin
    INCLUDES DESTINATION include
    )

install(
    DIRECTORY
        ${CMAKE_CURRENT_SOURCE_DIR}/inc/CppPluginFramework
    DESTINATION
        include
    COMPONENT
        Devel
)

include(CMakePackageConfigHelpers)
write_basic_package_version_file(
    "${CMAKE_CURRENT_BINARY_DIR}/CppPluginFramework/CppPluginFrameworkConfigVersion.cmake"
    VERSION ${CppPluginFramework_VERSION}
    COMPATIBILITY AnyNewerVersion
    )

export(EXPORT CppPluginFrameworkTargets
    FILE "${CMAKE_CURRENT_BINARY_DIR}/CppPluginFramework/CppPluginFrameworkTargets.cmake"
    NAMESPACE CppPluginFramework::
    )

configure_file(cmake/CppPluginFrameworkConfig.cmake
    "${CMAKE_CURRENT_BINARY_DIR}/CppPluginFramework/CppPluginFrameworkConfig.cmake"
    COPYONLY
    )

set(ConfigPackageLocation lib/cmake/CppPluginFramework)

install(EXPORT CppPluginFrameworkTargets
    FILE
        CppPluginFrameworkTargets.cmake
    NAMESPACE
        CppPluginFramework::
    DESTINATION
        ${ConfigPackageLocation}
    )

install(
    FILES
        cmake/CppPluginFrameworkConfig.cmake
        "${CMAKE_CURRENT_BINARY_DIR}/CppPluginFramework/CppPluginFrameworkConfigVersion.cmake"
    DESTINATION
        ${ConfigPackageLocation}
    COMPONENT
        Devel
    )

# --------------------------------------------------------------------------------------------------
# Code Coverage
# --------------------------------------------------------------------------------------------------
option(CppPluginFramework_CodeCoverage "C++ Plugin Framework Code Coverage" OFF)

if (CppPluginFramework_CodeCoverage MATCHES ON)
    include(cmake/CodeCoverage.cmake)
    APPEND_COVERAGE_COMPILER_FLAGS()

    set(CppPluginFramework_CodeCoverage_EXCLUDES
        "'/usr/include/*'"
        "'${CMAKE_PREFIX_PATH}/*'"
        "'${CMAKE_CURRENT_SOURCE_DIR}/tests/*'"
        "'${CMAKE_CURRENT_BINARY_DIR}/*'"
        )
endif()

# --------------------------------------------------------------------------------------------------
# Tests
# --------------------------------------------------------------------------------------------------
enable_testing()
add_subdirectory(tests)
